services:
  backend-flask:
    env_file:
      - .env
    build: ./backend-flask
    ports:
      - "4567:4567"
    volumes:
      - ./backend-flask:/backend-flask
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4567/api/health-check"]
      interval: 30s
      timeout: 10s
      retries: 5
  xray-daemon:
    image: "amazon/aws-xray-daemon"
    env_file:
      - .env
    command:
      - "xray -o -b xray-daemon:2000"
    ports:
      - 2000:2000/udp
  db:
    image: postgres:13-alpine
    restart: always
    env_file:
      - .env
    ports:
      - '5432:5432'
    volumes: 
      - db:/var/lib/postgresql/data

  # ------ DynamoDB Local Service ------
  dynamodb-local:
    # We need user:root to get this working on some systems
    user: root
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    image: "amazon/dynamodb-local:latest"
    container_name: dynamodb-local
    ports:
      - "8000:8000"
    volumes:
      # This is a bind mount, linking a local folder to a container folder
      - "./docker/dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal
  frontend-react-js:
    env_file:
      - .env
    build: ./frontend-react-js
    ports:
      - "3000:3000"
    volumes:
      - ./frontend-react-js:/frontend-react-js
      - /frontend-react-js/node_modules
    depends_on:
      backend-flask:
        condition: service_healthy
volumes:
  # This defines a named volume called 'db' that Docker will manage
  db:
    driver: local